from django.db import models

from UserServices.models import Users
from ProductServices.models import Products


"""
Purchase Order Classes
"""

class PurchaseOrder(models.Model):
    order_number = models.AutoField(primary_key=True)
    warehouse_id = models.ForeignKey('InventoryServices.Warehouse', on_delete=models.CASCADE, blank=True, null=True, related_name='warehouse_id_purchase_order')
    supplier_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='supplier_id_purchase_order')
    last_updated_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='last_updated_by_user_id_purchase_order')
    purchase_order_code = models.CharField(max_length=255)
    purchase_order_date = models.DateField()
    expected_delivery_date = models.DateField()
    payment_terms = models.CharField(max_length=255,  blank=True, null=True, choices=[('Credit', 'Credit'), ('Online',  'Online')], default='Online')
    payment_status = models.CharField(max_length=255,  blank=True, null=True, choices=[('Paid', 'Paid'), ('Unpaid', 'Unpaid'), ('Pending', 'Pending'), ('Cancelled',  'Cancelled')], default='Unpaid')
    paid_amount = models.DecimalField(max_digits=10, decimal_places=2)
    due_amoount = models.DecimalField(max_digits=10, decimal_places=2)
    discount_amount  = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    discount_type = models.CharField(max_length=255, choices=[('Percentage', 'Percentage'), ('Amount', 'Amount')], default='Amount')
    shipping_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_type = models.CharField(max_length=255, choices=[('Free', 'Free'), ('Paid', 'Paid')], default='Free')
    shipping_tax_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_cancelled_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_cancelled_tax_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    additional_details = models.JSONField()
    status = models.CharField(max_length=255, choices=[('Pending', 'Pending'), ('Cancelled', 'Cancelled'), ('Sent', 'Sent'), ('Received', 'Received'), ("Returned", "Returned")], default='Pending')
    created_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='created_by_user_id_purchase_order')
    updated_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='updated_by_user_id_purchase_order')
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_purchase_order')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    cancelled_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='cancelled_by_user_id_purchase_order')
    cancelled_at = models.DateTimeField(blank=True, null=True)
    cancelled_reason = models.TextField()
    received_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='received_by_user_id_purchase_order')
    received_at = models.DateTimeField(blank=True, null=True)
    returned_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='returned_by_user_id_purchase_order')
    returned_at = models.DateTimeField(blank=True, null=True)


class PurchaseOrderItems (models.Model):
    id = models.AutoField(primary_key=True)
    purchase_order_id = models.ForeignKey(PurchaseOrder, on_delete=models.CASCADE, related_name='purchase_order_item_id')
    product_id = models.ForeignKey(Products, on_delete=models.CASCADE, related_name='product_id_purchase_order_item')
    product_name = models.CharField(max_length=255)
    product_description = models.TextField()
    product_image = models.TextField()
    product_unit = models.CharField(max_length=255)
    quantity_ordered = models.IntegerField()
    quantity_received = models.IntegerField(default=0)
    quantity_cancelled = models.IntegerField(default=0)
    quantity_returned = models.IntegerField(default=0)
    buying_price = models.DecimalField(max_digits=10, decimal_places=2)
    selling_price = models.DecimalField(max_digits=10, decimal_places=2)
    tax_amount = models.DecimalField(max_digits=10, decimal_places=2)
    tax_percent = models.DecimalField(max_digits=10, decimal_places=2)
    amount_paid = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    amount_returned = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    amount_ordered = models.DecimalField(max_digits=10, decimal_places=2)
    amount_cancelled = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_tax_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_cancelled_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_cancelled_tax_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    discount_type = models.CharField(max_length=255, choices=[('Percentage', 'Percentage'), ('Amount', 'Amount')], default='Amount')
    additional_details = models.JSONField()
    status = models.CharField(max_length=255, choices=[('Pending', 'Pending'), ('Cancelled', 'Cancelled'), ('Sent', 'Sent'), ('Received', 'Received'), ("Returned", "Returned")], default='Pending')
    created_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='created_by_user_id_purchase_order_item')
    updated_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='updated_by_user_id_purchase_order_item')
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_purchase_order_item')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    approved_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='approved_by_user_id_purchase_order_item')
    approved_at = models.DateTimeField(blank=True, null=True)
    cancelled_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='cancelled_by_user_id_purchase_order_item')
    cancelled_at = models.DateTimeField(blank=True, null=True)
    cancelled_reason = models.TextField()
    received_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='received_by_user_id_purchase_order_item')
    received_at = models.DateTimeField(blank=True, null=True)
    returned_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='returned_by_user_id_purchase_order_item')
    returned_at = models.DateTimeField(blank=True, null=True)


class PurchaseOrderInwardedLog(models.Model):
    id = models.AutoField(primary_key=True)
    purchase_order_id = models.ForeignKey(PurchaseOrder, on_delete=models.CASCADE, blank=True, null=True, related_name='purchase_order_id_purchase_order_inwarded_log')
    invoice_path = models.TextField()
    invoice_number = models.CharField(max_length=255)
    notes = models.CharField(max_length=255)
    inwarded_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='inwarded_by_user_id_purchase_order_inwarded_log')
    inwarded_at = models.DateTimeField()
    additional_details = models.JSONField()
    status = models.CharField(max_length=255, choices=[('Pending', 'Pending'), ('Cancelled', 'Cancelled'), ('Sent', 'Sent'), ('Received', 'Received'), ("Returned", "Returned")], default='Pending')
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_purchase_order_inwarded_log')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)


class PurchaseOrderItemInwardedLog(models.Model):
    id = models.AutoField(primary_key=True)
    purchase_order_item_id = models.ForeignKey(PurchaseOrderItems, on_delete=models.CASCADE, blank=True, null=True, related_name='purchase_order_item_id_purchase_order_inwarded_logs')
    inwarded_quantity = models.IntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    tax_percentage = models.DecimalField(max_digits=10, decimal_places=2)
    discount_amount = models.DecimalField(max_digits=10, decimal_places=2)
    discount_type = models.CharField(max_length=255,choices=[("Percentage", "Percentage"),("Amount", "Amount")],  default="Percentage")
    shipping_amount = models.DecimalField(max_digits=10, decimal_places=2)
    shipping_tax_percentage = models.DecimalField(max_digits=10, decimal_places=2)
    additional_details = models.JSONField()
    status = models.CharField(max_length=255, choices=[('Pending', 'Pending'), ('Cancelled', 'Cancelled'), ('Sent', 'Sent'), ('Received', 'Received'), ("Returned", "Returned")], default='Pending')
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name="domain_user_id_purchase_order_inwarded_logs")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)


class PurchaseOrderLogs(models.Model):
    id = models.AutoField(primary_key=True)
    purchase_order_id = models.ForeignKey(PurchaseOrder, on_delete=models.CASCADE, blank=True, null=True, related_name='purchase_order_id_purchase_order_logs')
    comment = models.TextField()
    additional_details  = models.JSONField()
    created_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='created_by_user_id_purchase_order_logs')
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_purchase_order_logs')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)


"""
Sales Order Classes
"""

class SalesOrder(models.Model):
    order_number = models.AutoField(primary_key=True)
    customer_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='customer_id_sales_order')
    last_updated_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='last_updated_by_user_id_sales_order')
    sales_order_code = models.CharField(max_length=255)
    sales_order_date = models.DateField()
    expected_delivery_date = models.DateField()
    payment_terms = models.CharField(max_length=255,  blank=True, null=True, choices=[('Credit', 'Credit'), ('Online',  'Online')], default='Online')
    payment_status = models.CharField(max_length=255,  blank=True, null=True, choices=[('Paid', 'Paid'), ('Unpaid', 'Unpaid'), ('Pending', 'Pending'), ('Cancelled',  'Cancelled')], default='Unpaid')
    paid_amount = models.DecimalField(max_digits=10, decimal_places=2)
    due_amoount = models.DecimalField(max_digits=10, decimal_places=2)
    discount_amount  = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    discount_type = models.CharField(max_length=255, choices=[('Percentage', 'Percentage'), ('Amount', 'Amount')], default='Amount')
    shipping_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_type = models.CharField(max_length=255, choices=[('Free', 'Free'), ('Paid', 'Paid')], default='Free')
    shipping_tax_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_cancelled_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_cancelled_tax_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    additional_details = models.JSONField()
    status = models.CharField(max_length=255, choices=[('Pending', 'Pending'), ('Cancelled', 'Cancelled'), ('Sent', 'Sent'), ('Delivered', 'Delivered'), ("Returned", "Returned")], default='Pending')
    created_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='created_by_user_id_sales_order')
    updated_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='updated_by_user_id_sales_order')
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_sales_order')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    cancelled_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='cancelled_by_user_id_sales_order')
    cancelled_at = models.DateTimeField(blank=True, null=True)
    cancelled_reason = models.TextField()
    received_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='received_by_user_id_sales_order')
    received_at = models.DateTimeField(blank=True, null=True)
    returned_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='returned_by_user_id_sales_order')
    returned_at = models.DateTimeField(blank=True, null=True)


class SalesOrderItems (models.Model):
    id = models.AutoField(primary_key=True)
    sales_order_id = models.ForeignKey(SalesOrder, on_delete=models.CASCADE, related_name='sales_order_items_id')
    product_id = models.ForeignKey(Products, on_delete=models.CASCADE, related_name='product_id_sales_order_item')
    product_name = models.CharField(max_length=255)
    product_description = models.TextField()
    product_image = models.TextField()
    product_unit = models.CharField(max_length=255)
    quantity_ordered = models.IntegerField()
    quantity_delivered = models.IntegerField(default=0)
    quantity_shipped = models.IntegerField(default=0)
    quantity_cancelled = models.IntegerField(default=0)
    quantity_returned = models.IntegerField(default=0)
    purchase_price = models.DecimalField(max_digits=10, decimal_places=2)
    tax_amount = models.DecimalField(max_digits=10, decimal_places=2)
    tax_percent = models.DecimalField(max_digits=10, decimal_places=2)
    amount_paid = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    amount_returned = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    amount_ordered = models.DecimalField(max_digits=10, decimal_places=2)
    amount_cancelled = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_tax_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_cancelled_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    shipping_cancelled_tax_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    discount_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    discount_type = models.CharField(max_length=255, choices=[('Percentage', 'Percentage'), ('Amount', 'Amount')], default='Amount')
    additional_details = models.JSONField()
    status = models.CharField(max_length=255, choices=[('Pending', 'Pending'), ('Cancelled', 'Cancelled'), ('Sent', 'Sent'), ('Delivered', 'Delivered'), ("Returned", "Returned")], default='Pending')
    created_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='created_by_user_id_sales_order_item')
    updated_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='updated_by_user_id_sales_order_item')
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_sales_order_item')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    approved_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='approved_by_user_id_sales_order_item')
    approved_at = models.DateTimeField(blank=True, null=True)
    cancelled_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='cancelled_by_user_id_sales_order_item')
    cancelled_at = models.DateTimeField(blank=True, null=True)
    cancelled_reason = models.TextField()
    shipped_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='shipped_by_user_id_sales_order_item')
    shipped_at = models.DateTimeField(blank=True, null=True)
    returned_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='returned_by_user_id_sales_order_item')
    returned_at = models.DateTimeField(blank=True, null=True)


class SalesOrderOutwardedLog(models.Model):
    id = models.AutoField(primary_key=True)
    sales_order_id = models.ForeignKey(SalesOrder, on_delete=models.CASCADE, blank=True, null=True, related_name='sales_order_id_sales_order_outwarded_log')
    invoice_path = models.TextField()
    invoice_number = models.CharField(max_length=255)
    notes = models.TextField()
    outwarded_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='outwarded_by_user_id_sales_order_outwarded_log')
    outwarded_at = models.DateTimeField()
    additional_details = models.JSONField()
    status = models.CharField(max_length=255, choices=[('Pending', 'Pending'), ('Cancelled', 'Cancelled'), ('Sent', 'Sent'), ('Delivered', 'Delivered'), ("Returned", "Returned")], default='Pending')
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_sales_order_outwarded_log')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)


class SalesOrderItemOutwardedLog(models.Model):
    id = models.AutoField(primary_key=True)
    sales_order_item_id = models.ForeignKey(SalesOrderItems, on_delete=models.CASCADE, blank=True, null=True, related_name='sales_order_item_id_sales_order_item_outwarded_log')
    outwarded_quantity = models.IntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    tax_percentage = models.DecimalField(max_digits=10, decimal_places=2)
    discount_amount = models.DecimalField(max_digits=10, decimal_places=2)
    discount_type = models.CharField(max_length=255,choices=[("Percentage", "Percentage"),("Amount", "Amount")],  default="Percentage")
    shipping_amount = models.DecimalField(max_digits=10, decimal_places=2)
    shipping_tax_percentage = models.DecimalField(max_digits=10, decimal_places=2)
    additional_details = models.JSONField()
    status = models.CharField(max_length=255, choices=[('Pending', 'Pending'), ('Cancelled', 'Cancelled'), ('Sent', 'Sent'), ('Received', 'Received'), ("Returned", "Returned")], default='Pending')
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name="domain_user_id_sales_order_item_outwarded_log")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)


class SalesOrderLogs(models.Model):
    id = models.AutoField(primary_key=True)
    product_order_id = models.ForeignKey(SalesOrder, on_delete=models.CASCADE, blank=True, null=True, related_name='product_order_id_sales_order_logs')
    comment = models.TextField()
    additional_details  = models.JSONField()
    created_by_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='created_by_user_id_sales_order_logs')
    domain_user_id = models.ForeignKey(Users, on_delete=models.CASCADE, blank=True, null=True, related_name='domain_user_id_sales_order_logs')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

# End of code
